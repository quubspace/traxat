#+BEGIN_HTML
<div id="traxat-logo" align="center">
    <br />
    <img src="images/logo.svg" alt="Traxat Logo" width="225" height="225"/>
    <h1>Traxat</h1>
    <h3>Open Source Tabletop Satellite Tracker</h3>
</div>

<div id="badges" align="center">

  <a href="https://github.com/quubspace/traxat/actions/workflows/software.yml">
    <img src="https://github.com/quubspace/traxat/actions/workflows/software.yml/badge.svg?branch=main" alt="GitHub Workflow Status"/>
  </a>

</div>
#+END_HTML

** About
The Traxat project is an open-source and open hardware tabletop satellite tracker.
This repository contains the Rust code for the firmware, the CAD models, and
instructions for constructing your own Traxat. Fully compatible with GPredict,
Traxat utilises hamlib and rotctld to enable wide compatibility with a wide
variety of programs.

** Building
*** Software
Traxat is guaranteed to build on the Raspberry Pi 4B+ and on the Raspberry Pi
3B+. It appears to build correctly on the M1 MacBook Pro as well, but all other
platforms aren't directly supported.

Traxat is written in Rust, so you will need to have a Rust installation in order to
compile it. Traxat is guaranteed to compile with Rust 1.59.0 (stable) or newer, but
older versions may also work.

To build Traxat:

#+BEGIN_SRC shell
$ git clone https://github.com/quubspace/traxat
$ cd traxat/software
$ cargo build --release
#+END_SRC

Once finished, you can try running Traxat:

#+BEGIN_SRC shell
$ ./target/release/traxat
#+END_SRC

In order to use Traxat on system start, copy the service file as root and enable the ~systemd~ service:

#+BEGIN_SRC shell
# TODO: Write the systemd unit
$ sudo cp traxat.service /etc/systemd/system/
$ sudo systemctl enable --now traxat
#+END_SRC

A static IP is recommended for the Raspberry Pi so that your tracking program
can consistently connect to the unit.

*** Hardware
The Traxat unit consists of 3D-printed parts, zip-ties, stepper motors, and a
Raspberry Pi unit (preferably a Pi 4B+ for optimal performance).

The STLs for the 3D-printed parts are included in ~/hardware~.

** Testing

To run manual step tests, make use of the following bash function:

#+BEGIN_SRC shell
#!/bin/bash
function manual_testing() {
    local sentSteps=${1:-0}

    # Validate user input
    [[ -z ${my_count} ]] && my_count=0
    if [ "$sentSteps" -eq "$sentSteps" ]; then
        ((my_count += sentSteps))
        echo "steps: ${my_count}"
    else
        echo "${sentSteps} is not an int" >&2
        return 1
    fi

    if [[ ${sentSteps} == "d" ]]; then
        my_count=0
        echo "counted steps cleared"
        return
    fi

    echo "s ${sentSteps}" | nc -w 1 127.0.0.1 4533 >/dev/null
}
#+END_SRC

** Credits
Initial prototypes of Traxat were inspired by PiTator by @M0JEC on GitHub. Thank
you to everyone at Quub for your continued support as well.
